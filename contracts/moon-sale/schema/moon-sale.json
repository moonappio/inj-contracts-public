{
  "contract_name": "moon-sale",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "sale"
    ],
    "properties": {
      "sale": {
        "$ref": "#/definitions/SaleConfig"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "SaleConfig": {
        "type": "object",
        "required": [
          "end_time",
          "max_supply",
          "pay_denom",
          "price_pay_amount",
          "price_receive_amount",
          "start_time"
        ],
        "properties": {
          "end_time": {
            "$ref": "#/definitions/Timestamp"
          },
          "max_supply": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "pay_denom": {
            "type": "string"
          },
          "price_pay_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "price_receive_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "sale_denom": {
            "type": [
              "string",
              "null"
            ]
          },
          "start_time": {
            "$ref": "#/definitions/Timestamp"
          }
        }
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_sale"
        ],
        "properties": {
          "update_sale": {
            "type": "object",
            "required": [
              "sale"
            ],
            "properties": {
              "sale": {
                "$ref": "#/definitions/SaleConfig"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_user_list"
        ],
        "properties": {
          "set_user_list": {
            "type": "object",
            "required": [
              "users"
            ],
            "properties": {
              "users": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/UserInfoReq"
                }
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "buy"
        ],
        "properties": {
          "buy": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "funds",
              "to"
            ],
            "properties": {
              "funds": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/Coin"
                }
              },
              "to": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer_ownership"
        ],
        "properties": {
          "transfer_ownership": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "SaleConfig": {
        "type": "object",
        "required": [
          "end_time",
          "max_supply",
          "pay_denom",
          "price_pay_amount",
          "price_receive_amount",
          "start_time"
        ],
        "properties": {
          "end_time": {
            "$ref": "#/definitions/Timestamp"
          },
          "max_supply": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "pay_denom": {
            "type": "string"
          },
          "price_pay_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "price_receive_amount": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "sale_denom": {
            "type": [
              "string",
              "null"
            ]
          },
          "start_time": {
            "$ref": "#/definitions/Timestamp"
          }
        }
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      },
      "UserInfoReq": {
        "type": "object",
        "required": [
          "address",
          "allocation",
          "spent"
        ],
        "properties": {
          "address": {
            "type": "string"
          },
          "allocation": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          "spent": {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "get_sale"
        ],
        "properties": {
          "get_sale": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_user_info"
        ],
        "properties": {
          "get_user_info": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_users"
        ],
        "properties": {
          "get_users": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "get_received_amount"
        ],
        "properties": {
          "get_received_amount": {
            "type": "object",
            "required": [
              "pay_amount"
            ],
            "properties": {
              "pay_amount": {
                "type": "integer",
                "format": "uint128",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "get_received_amount": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "uint128",
      "type": "integer",
      "format": "uint128",
      "minimum": 0.0
    },
    "get_sale": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSaleResponse",
      "type": "object",
      "required": [
        "sale_config",
        "sale_data"
      ],
      "properties": {
        "sale_config": {
          "$ref": "#/definitions/SaleConfig"
        },
        "sale_data": {
          "$ref": "#/definitions/SaleData"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "SaleConfig": {
          "type": "object",
          "required": [
            "end_time",
            "max_supply",
            "pay_denom",
            "price_pay_amount",
            "price_receive_amount",
            "start_time"
          ],
          "properties": {
            "end_time": {
              "$ref": "#/definitions/Timestamp"
            },
            "max_supply": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "pay_denom": {
              "type": "string"
            },
            "price_pay_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "price_receive_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "sale_denom": {
              "type": [
                "string",
                "null"
              ]
            },
            "start_time": {
              "$ref": "#/definitions/Timestamp"
            }
          }
        },
        "SaleData": {
          "type": "object",
          "required": [
            "total_spent"
          ],
          "properties": {
            "total_spent": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          }
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_user_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserInfoRes",
      "type": "object",
      "required": [
        "address",
        "allocation",
        "received_amount",
        "spent"
      ],
      "properties": {
        "address": {
          "type": "string"
        },
        "allocation": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "received_amount": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        },
        "spent": {
          "type": "integer",
          "format": "uint128",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "get_users": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_UserInfoRes",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UserInfoRes"
      },
      "definitions": {
        "UserInfoRes": {
          "type": "object",
          "required": [
            "address",
            "allocation",
            "received_amount",
            "spent"
          ],
          "properties": {
            "address": {
              "type": "string"
            },
            "allocation": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "received_amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "spent": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
